[{"id":0,"href":"/playbook/mochi-ui/","title":"How to use a shared UI library in multiple platforms.","section":"Playbooks","content":"by hnh.\nBackground # Earlier this year, we introduced a new version of Telegram for Mochi, but it came with some new challenges.\nUp until now, we\u0026rsquo;ve been using a single backend system to support all of our services. This approach was taken to ensure a smooth experience for both users and engineers across different platforms. However, a problem arose when it came to the user interface. We found ourselves dealing with two different sets of rules (Discord \u0026amp; Telegram) for how the interface should look and behave. This complexity kept growing as we added new features and concepts. Eventually, we reached a point where it became nearly impossible to maintain consistency between the two platforms. Worth noting that, we also aim to have a Web, Mobile \u0026amp; Raycast versions for Mochi.\nTo solve these problems and make sure everyone has a similar and easy experience, we realized we need a library that contains all our UI stuff that everyone can use.\nBut, making this library work on different platforms isn\u0026rsquo;t simple. It needs to be easy enough for our frontend team to use, also flexible enough to work on all platforms.\nWins # Flatten the learning curves. # You might not know this, but our frontend team only has 2 full-time members who really understand all the business and technical stuff. And we have 3 platforms to take care of. So, we definitely need some extra help from our community through our \u0026lsquo;Bounty Program.\u0026rsquo;\nLuckily, thanks to our shared library, the process is pretty simple now.\nBefore:\nA: Hey, can you help me with this feature? A: This feature will be on Discord, Telegram, and the website. Here\u0026#39;s how it should work on each platform. A: Make sure to create test files for all the platforms because we make changes frequently. A: Oh, and please document it somewhere because I might forget. B: ... Now:\nA: Hey, can you help me with this feature? A: All you need to do is use a function from a well-tested and clearly defined source. B: Sure! Consistency throughout the systems # Dealing with the nitty-gritty details can be quite challenging. Often, we overlook small things like how to display numbers or whether we should add a period at the end of a sentence.\nHandling these details on just one platform is tough, and when it comes to managing them on five different platforms, it feels nearly impossible. Our daily meetings are increasingly filled with questions like, \u0026ldquo;Hey, did you make this change on Discord but forget about it on Telegram?\u0026rdquo; and vice versa.\nAfter we introduced mochi-ui our focus shifted from dealing with technical issues to more meaningful questions like, \u0026ldquo;Does this feature actually make sense?\u0026rdquo; or \u0026ldquo;Hey, this is a bug report from a user, can someone look into it?\u0026rdquo; These are the kinds of challenges we are more than happy to face.\nGotchas # Of course, there\u0026rsquo;s no one-size-fits-all solution, especially on the first attempt. We\u0026rsquo;ve identified some issues, and we\u0026rsquo;d be glad to have your hand in addressing them:\nLack of Local Preview: Currently, we don\u0026rsquo;t have a way to preview changes locally. The only option is to update the package and check it in our development environments. Text-Based Components: Some of our components are still text-based, which could be limiting if we need to use them in web applications. Single point of failure: Since \u0026lsquo;mochi-ui\u0026rsquo; is centralized as the only implementation, we must ensure it\u0026rsquo;s robust and fast. Some rendering logic still requires API calls, and we need to find ways to eliminate this dependency. Final thoughts # This approach is not and never a silver-bullet and may not be appropriate in all cases. However, we believe that this implementation has made our lives a bit less stressful by allowing us to shift our focus to other areas.\nThis blog post is part of our Mochi Frontend Practices, also check out:\nHow we using mock data to fasten our UI development Guidelines: How to render currency and profile name Applying state machine to switch UI view "},{"id":1,"href":"/mission/","title":"mission","section":"","content":"Here is an example mission statement lol\n"},{"id":2,"href":"/mocking-test-to-deploy-as-an-example/","title":"Mocking Test to deploy as an example","section":"","content":" Introduction # This is a simple example\nWe will link the following pages:\nmission "},{"id":3,"href":"/about/","title":"About","section":"","content":" About # mission philosophy "}]