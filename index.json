{"version":"https://jsonfeed.org/version/1","title":"Console Labs","home_page_url":"https://log.console.so/","feed_url":"https://log.console.so/index.json","description":"<no value>","expired":false,"items":[{"id":"b717137a573b6d87087c2c54072949431c22ec85","title":"contributors","summary":"Here are people at Console Labs and contributors who give hands to make our experiments happened","content_text":"Here are people at Console Labs and contributors who give hands to make our experiments happened\ncore neko-san: twitter, bsky hnh: github vincent: github tono: twitter contributors anna minh.cloud 0xLight owltrovert PAMsheep phucld: github trkhoi: github anhnh: github huynk: github phucnh: github Mashiro: github quang: github bien: github namnhce: github minhth: github vdhieu: github haongo138: github monotykamary: github Pod Town DAO ùñòùñöùñì ùñãùñéùñóùñä [ùñìùñãùñÜ] digdug bimps: twitter ","content_html":"\u003cp\u003eHere are people at Console Labs and contributors who give hands to make our experiments happened\u003c/p\u003e\n\n\n\u003ch3 id=\"core\"\u003ecore \u003ca href=\"#core\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eneko-san: \u003ca href=\"https://twitter.com/abaddeed\"\u003etwitter\u003c/a\u003e, \u003ca href=\"https://bsky.app/profile/han.bsky.social\"\u003ebsky\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ehnh: \u003ca href=\"https://github.com/huynguyenh\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003evincent: \u003ca href=\"https://github.com/tuanddd\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003etono: \u003ca href=\"https://twitter.com/jxt0no\"\u003etwitter\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"contributors\"\u003econtributors \u003ca href=\"#contributors\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eanna\u003c/li\u003e\n\u003cli\u003eminh.cloud\u003c/li\u003e\n\u003cli\u003e0xLight\u003c/li\u003e\n\u003cli\u003eowltrovert\u003c/li\u003e\n\u003cli\u003ePAMsheep\u003c/li\u003e\n\u003cli\u003ephucld: \u003ca href=\"https://github.com/phucledien\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003etrkhoi: \u003ca href=\"https://github.com/trkhoi\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eanhnh: \u003ca href=\"https://github.com/anhnh12\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ehuynk: \u003ca href=\"https://github.com/NguyenHuy1812\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ephucnh: \u003ca href=\"https://github.com/jphuc96\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMashiro: \u003ca href=\"https://github.com/ngolapnguyen\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003equang: \u003ca href=\"https://github.com/lmquang\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ebien: \u003ca href=\"https://github.com/baenv\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003enamnhce: \u003ca href=\"https://github.com/namnhce\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eminhth: \u003ca href=\"https://github.com/thminhVN\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003evdhieu: \u003ca href=\"https://github.com/vdhieu\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ehaongo138: \u003ca href=\"https://github.com/haongo138\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003emonotykamary: \u003ca href=\"https://github.com/monotykamary\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"pod-town-dao\"\u003ePod Town DAO \u003ca href=\"#pod-town-dao\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eùñòùñöùñì ùñãùñéùñóùñä [ùñìùñãùñÜ]\u003c/li\u003e\n\u003cli\u003edigdug\u003c/li\u003e\n\u003cli\u003ebimps: \u003ca href=\"https://twitter.com/bimpmeister\"\u003etwitter\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","url":"https://log.console.so/contributors/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"28096-28-09T90:2828:00+00:00","date_modified":"28096-28-09T90:2828:00+00:00"},{"id":"83be0ff7a3728171415c2fdecf4f128f51b1cc10","title":"Shape Up","summary":"How we shape our workflow","content_text":" Exploring We build up knowledge through collective team learning. This page is where lab members share their explorations of the financial world.\nEvery week, we host a presentation to discuss our findings. This not only aids memory recall but also fosters a lasting learning culture within the team, keeping us updated on market trends.\nWe cover a range of topics, from basics like \u0026lsquo;6 jars budgeting methodology\u0026rsquo; to more current subjects like \u0026lsquo;web3 liquidity techniques\u0026rsquo;.\nWe‚Äôre always open to more contributors who are on the same journey, inviting them to join us in creating valuable and sharp software for everyone.\nMonthly recap We write a monthly recap and publish them on this site, also direct to your inbox via our Substack Newsletter at newsletter.console.so.\nThe newsletter will include only the summary of changes, updates on new findings, projects and what we have been up to, casually drafted by me and other members.\n","content_html":"\n\n\u003ch2 id=\"exploring\"\u003eExploring \u003ca href=\"#exploring\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe build up knowledge through collective team learning. This page is where lab members share their explorations of the financial world.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEvery week, we host a presentation\u003c/strong\u003e to discuss our findings. This not only aids memory recall but also fosters a lasting learning culture within the team, keeping us updated on market trends.\u003c/p\u003e\n\u003cp\u003eWe cover a range of topics, from basics like \u0026lsquo;6 jars budgeting methodology\u0026rsquo; to more current subjects like \u0026lsquo;web3 liquidity techniques\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eWe‚Äôre always open to more contributors who are on the same journey, inviting them to join us in creating valuable and sharp software for everyone.\u003c/p\u003e\n\n\n\u003ch2 id=\"monthly-recap\"\u003eMonthly recap \u003ca href=\"#monthly-recap\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eWe write a monthly recap\u003c/strong\u003e and publish them on this site, also direct to your inbox via our Substack Newsletter at \u003ca href=\"https://newsletter.console.so\"\u003enewsletter.console.so\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe newsletter will include only the summary of changes, updates on new findings, projects and what we have been up to, casually drafted by me and other members.\u003c/p\u003e\n","url":"https://log.console.so/blog/shape-up/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"28096-28-09T90:2828:00+00:00","date_modified":"28096-28-09T90:2828:00+00:00"},{"id":"4e50d33173685e07c813321d49d13c8ed7f3c338","title":"emoji","summary":"","content_text":"","content_html":"","url":"https://log.console.so/experiments/emoji/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"26096-26-09T90:2626:00+00:00","date_modified":"26096-26-09T90:2626:00+00:00"},{"id":"5e7a89bd1b9efa7a0f082d67b8c79ebd76938075","title":"kekk","summary":"","content_text":"","content_html":"","url":"https://log.console.so/experiments/kekk/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"26096-26-09T90:2626:00+00:00","date_modified":"26096-26-09T90:2626:00+00:00"},{"id":"00c95896bfc45cd8dc37968f80b5a3d9c7b18319","title":"mochi","summary":"","content_text":"","content_html":"","url":"https://log.console.so/experiments/mochi/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"26096-26-09T90:2626:00+00:00","date_modified":"26096-26-09T90:2626:00+00:00"},{"id":"3ca26628562eaacf005e80e2f6a33a237c12281b","title":"neko","summary":"","content_text":"","content_html":"","url":"https://log.console.so/experiments/neko/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"26096-26-09T90:2626:00+00:00","date_modified":"26096-26-09T90:2626:00+00:00"},{"id":"04ef6c6ce281d092fdb35e90a33bd55692ca56a8","title":"pod town","summary":"","content_text":"","content_html":"","url":"https://log.console.so/experiments/pod-town/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"26096-26-09T90:2626:00+00:00","date_modified":"26096-26-09T90:2626:00+00:00"},{"id":"e62e65235cf1e62e300fabc1e40378656b4b53d2","title":"WAGMI comics","summary":"","content_text":"","content_html":"","url":"https://log.console.so/experiments/wagmi/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"26096-26-09T90:2626:00+00:00","date_modified":"26096-26-09T90:2626:00+00:00"},{"id":"c887b9d3b3905e1e3eb236a1e334ca966299726f","title":"About Us","summary":"We‚Äôre Console Labs. We‚Äôre all about that finance and making things fun. We‚Äôre diving deep into tech, data, web3, blockchain, and jotting down all the cool stuff we find, hoping to whip up something rad for everyone online.","content_text":" Intro We‚Äôre Console Labs. We‚Äôre all about that finance and making things fun. We‚Äôre diving deep into tech, data, web3, blockchain, and jotting down all the cool stuff we find, hoping to whip up something rad for everyone online.\nPeep our philosophy and mission, or keep it fresh by catching our monthly updates. Oh, and btw, we‚Äôre like a sibling to Dwarves.\nWebsite üíª This site is where we show our face to the world. It‚Äôs all glammed up using Hugo with some custom magic by @monotykamary and @vincent. Scope out the repo right here.\nStay Connected Twitter: Hit us up @console_labs Email: Say hey gm@console.so Github: Check us out github.com/consolelabs Also, catch us on Warpcast Spilling the Tea üçµ We kicked off Console Labs during the whole pandemic chaos in 2020. Since then, it‚Äôs been non-stop experimenting. Some stuff totally rocked, some didn‚Äôt, but all the stories are right here.\nAfter each vibe check, we jot down the deets, thoughts, and what we learned. Han, tono, hnh, and vincent are keeping this site alive, with a little backup from the crew including anna, minh_cloud, and 0xLight.\nWe‚Äôre all out here with our own thoughts and vibes. It‚Äôs totally cool for us to get it wrong and flip our views. Always learning and getting deeper into all the things. üß†\nRoadmap We drew up our plans on a canvas, and every time something pops off, the canvas gets bigger. Wanna see what‚Äôs up? Check it: roadmap.console.so\nContribute If you love what we\u0026rsquo;re doing, feel free to open PRs or check out our backlog. Let‚Äôs make cool stuff together.\n","content_html":"\n\n\u003ch2 id=\"intro\"\u003eIntro \u003ca href=\"#intro\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe‚Äôre Console Labs. We‚Äôre all about that finance and making things fun. We‚Äôre diving deep into tech, data, web3, blockchain, and jotting down all the cool stuff we find, hoping to whip up something rad for everyone online.\u003c/p\u003e\n\u003cp\u003ePeep our \u003ca href=\"/philosophy/\"\u003ephilosophy\u003c/a\u003e and \u003ca href=\"/mission/\"\u003emission\u003c/a\u003e, or keep it fresh by catching our monthly updates.\nOh, and btw, we‚Äôre like a sibling to \u003ca href=\"https://d.foundation\"\u003eDwarves\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch2 id=\"website-\"\u003eWebsite üíª \u003ca href=\"#website-\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis site is where we show our face to the world. It‚Äôs all glammed up using \u003ca href=\"https://github.com/gohugoio/hugo\"\u003eHugo\u003c/a\u003e with some custom magic by @monotykamary and @vincent.\nScope out the repo \u003ca href=\"https://github.com/consolelabs/log.console.so\"\u003eright here\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch2 id=\"stay-connected\"\u003eStay Connected \u003ca href=\"#stay-connected\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTwitter: Hit us up \u003ca href=\"https://twitter.com/console_labs\"\u003e@console_labs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEmail: Say hey \u003ca href=\"mailto:gm@console.so\"\u003egm@console.so\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGithub: Check us out \u003ca href=\"https://github.com/consolelabs\"\u003egithub.com/consolelabs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAlso, catch us on Warpcast\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 id=\"spilling-the-tea-\"\u003eSpilling the Tea üçµ \u003ca href=\"#spilling-the-tea-\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe kicked off Console Labs during the whole pandemic chaos in 2020. Since then, it‚Äôs been non-stop experimenting. Some stuff totally rocked, some didn‚Äôt, but all the stories are right here.\u003c/p\u003e\n\u003cp\u003eAfter each vibe check, we jot down the deets, thoughts, and what we learned. Han, tono, hnh, and vincent are keeping this site alive, with a little backup from the crew including anna, minh_cloud, and 0xLight.\u003c/p\u003e\n\u003cp\u003eWe‚Äôre all out here with our own thoughts and vibes. It‚Äôs totally cool for us to get it wrong and flip our views. Always learning and getting deeper into all the things. üß†\u003c/p\u003e\n\n\n\u003ch2 id=\"roadmap\"\u003eRoadmap \u003ca href=\"#roadmap\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe drew up our plans on a canvas, and every time something pops off, the canvas gets bigger. Wanna see what‚Äôs up? Check it: \u003ca href=\"https://roadmap.console.so\"\u003eroadmap.console.so\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/roadmap.jpg\"/\u003e\u003c/p\u003e\n\n\n\u003ch2 id=\"contribute\"\u003eContribute \u003ca href=\"#contribute\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIf you love what we\u0026rsquo;re doing, feel free to open PRs or check out our backlog. Let‚Äôs make cool stuff together.\u003c/p\u003e\n","url":"https://log.console.so/about/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"15096-15-09T90:1515:00+00:00","date_modified":"15096-15-09T90:1515:00+00:00"},{"id":"93429505fec7add8dddd0da2501b178f0459adae","title":"API-first development","summary":"","content_text":"by hnh\nBackground @Console Labs, our primary goal is to rapidly introduce new features and gather user feedback as quickly as possible. We understand that this approach isn\u0026rsquo;t flawless and can lead to regression bugs. However, at this stage of our product development, we are content with this strategy.\nThe challenge arises when we aim to develop something new within a short timeframe, typically one week or even just two days. This typically involves creating a small set of new features, starting from gathering requirements, designing the features, and then implementing them on both the backend and frontend.\nWe want to emphasize our focus on \u0026ldquo;both backend and frontend development\u0026rdquo; because this aspect is within our control as an engineering team. In a typical workflow, individuals often start with backend tasks such as designing the database and setting up APIs before moving on to implementation. However, we are exploring a different approach. We aim to build an API or establish a fixed data structure that allows the frontend team to work independently on their user interfaces. This way, we can streamline development and potentially reduce development time while maintaining control over our engineering processes.\nHow PO works on their requirement Meeting: User story clarification/refinement discussion Backend: provide a fixed JSON schema for the Frontend to work on Frontend: Using mock json host on this repo to work on your UI Backend: Work to implementation at the same time Switch to API-call when api ready ","content_html":"\u003cp\u003eby hnh\u003c/p\u003e\n\n\n\u003ch2 id=\"background\"\u003eBackground \u003ca href=\"#background\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e@Console Labs, our primary goal is to rapidly introduce new features and gather user feedback as quickly as possible. We understand that this approach isn\u0026rsquo;t flawless and can lead to regression bugs. However, at this stage of our product development, we are content with this strategy.\u003c/p\u003e\n\u003cp\u003eThe challenge arises when we aim to develop something new within a short timeframe, typically one week or even just two days. This typically involves creating a small set of new features, starting from gathering requirements, designing the features, and then implementing them on both the backend and frontend.\u003c/p\u003e\n\u003cp\u003eWe want to emphasize our focus on \u0026ldquo;both backend and frontend development\u0026rdquo; because this aspect is within our control as an engineering team. In a typical workflow, individuals often start with backend tasks such as designing the database and setting up APIs before moving on to implementation. However, we are exploring a different approach. We aim to build an API or establish a fixed data structure that allows the frontend team to work independently on their user interfaces. This way, we can streamline development and potentially reduce development time while maintaining control over our engineering processes.\u003c/p\u003e\n\n\n\u003ch2 id=\"how\"\u003eHow \u003ca href=\"#how\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003col start=\"0\"\u003e\n\u003cli\u003ePO works on their requirement\u003c/li\u003e\n\u003cli\u003eMeeting: User story clarification/refinement discussion\u003c/li\u003e\n\u003cli\u003eBackend: provide a fixed JSON schema for the Frontend to work on\u003c/li\u003e\n\u003cli\u003eFrontend: Using mock json host on \u003ca href=\"https://github.com/consolelabs/mock-data\"\u003ethis repo\u003c/a\u003e to work on your UI\nBackend: Work to implementation at the same time\u003c/li\u003e\n\u003cli\u003eSwitch to API-call when api ready\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"/playbook/../images/playbook/api-first.png\"/\u003e\u003c/p\u003e\n","url":"https://log.console.so/playbook/api-first/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"15096-15-09T90:1515:00+00:00","date_modified":"15096-15-09T90:1515:00+00:00"},{"id":"888bf4578a8c8d3a4bda6d8e18daf32a83117f4b","title":"Data layer","summary":"","content_text":"by hnh\nThis data layer serves as the central source of information for various features such as tickers, price alerts, and token details. These features rely on the data within this layer to provide accurate and up-to-date information to users. In essence, it\u0026rsquo;s like the beating heart of the mochi ecosystem, ensuring that all the essential data is readily available for users to access and use.\nRaw Data The raw data that powers our system originates from blockchain transaction data, which we can retrieve from various RPC sources. However, maintaining a stable and consistent RPC connection has proven to be challenging in our past experiences. To address this issue, we\u0026rsquo;ve adopted a different approach. We pull all the raw data into our Clickhouse database, where we store it for a period of 30 days before it\u0026rsquo;s automatically deleted.\nThis raw data plays a crucial role in providing transaction notifications to our users. Any transaction originating from wallets that we track is processed by our system. If a tracked wallet engages in a transaction, our system ensures that users are promptly notified about it. This process allows us to deliver real-time transaction updates and information to our users reliably.\nToken data Token data encompasses several important aspects:\nToken Info: This component provides project metadata, including details such as the project\u0026rsquo;s Twitter account, website, and a concise project description. We retrieve this information from sources like Etherscan or CoinGecko.\nPrice Info: Calculating price information ourselves can be redundant and resource-intensive. Instead, we rely on established sources like CoinGecko, which offers a stable API with reasonable costs. This allows us to provide accurate and up-to-date price data to our users without reinventing the wheel.\nDex Data: Dex data represents the most comprehensive information about each token. It includes details about which decentralized exchanges (dex) currently list the token and provides data such as the number of token holders or trading volume for each day. Rather than calculating this information in-house, we source it from multiple data sources and store it in our data layer. This approach ensures that our users have access to comprehensive dex-related data for each token without the need for extensive calculations on our part.\nGotchas Query speed When it comes to building online services, speed is a top priority. As our data layer continues to grow, we\u0026rsquo;ve implemented several optimization strategies to ensure efficient and fast data retrieval:\nCaching Frequently Accessed Data: To address the need for frequently queried data like token prices and metadata (such as emoji associated with tokens), we employ short-lived Redis caching. This allows us to store this data temporarily in a highly responsive cache, reducing the need to query the upstream services or databases repeatedly for the same information. Caching helps deliver swift responses to user requests. Read Replicas and Data Partitioning: For data that cannot be cached due to its infrequent use or size, we\u0026rsquo;ve taken a two-pronged approach. First, we\u0026rsquo;ve created read replicas within our PostgreSQL layer. These replicas serve as copies of our main database, dedicated to handling read requests. This not only spreads the load but also improves query response times. Additionally, we\u0026rsquo;ve optimized data storage and retrieval by partitioning our most frequently accessed tables. Partitioning involves breaking these tables into smaller, more manageable parts based on certain criteria (e.g., time, category, or other relevant factors). This partitioning strategy significantly enhances query performance, as it reduces the amount of data that needs to be scanned or processed during each query. This combination of read replicas and data partitioning ensures that we can maintain high-speed access to our data even as our data layer continues to expand.\nData Realtime-ness Ensuring real-time data accuracy for crucial information like token prices is essential to avoid missing any market movements. However, for certain types of data like total assets and token info, real-time updates can be delayed without significantly impacting user experience. Here\u0026rsquo;s how we manage this balance:\nReal-time Data for Price Updates: For data that requires real-time accuracy, such as token prices, we prioritize instant updates. This ensures that our users receive the most up-to-date information, especially those who rely on timely market data. Real-time data is essential to provide users with the information they need to make informed decisions in the fast-paced world of cryptocurrencies.\nDelayed Data for Less Critical Information: To reduce stress on our system and enhance the overall user experience, we introduce a slight delay in updating less critical information, such as total assets and token details. This delay allows us to optimize data processing and avoid overwhelming our resources. From the perspective of most users, this data still appears to be served instantly, ensuring a seamless experience.\nPrioritizing Real-time Data for Top Users: Recognizing the importance of real-time data for our top users, we\u0026rsquo;ve implemented a ranking system. The most active users or those with specific access privileges can enjoy the benefit of receiving data in real-time with minimal delay. This approach ensures that our highest-priority users have access to the most critical data without compromise.\nBackground Jobs for Data Handling: To manage these data updates efficiently, we handle most data processing as background jobs. This allows us to update and synchronize information without disrupting the user interface or slowing down the system\u0026rsquo;s responsiveness. By running these tasks in the background, we maintain a balance between real-time data needs and system stability.\nIn summary, our approach involves a careful balance between real-time data for critical information and slightly delayed updates for less critical data. This strategy, combined with a ranking system and background job processing, allows us to provide both real-time accuracy and a smooth user experience while managing system resources effectively.\nMaintain an affordable SaSS/infras price Maintaining a reasonable cost for the data layer is crucial for the sustainability of your online service. Here\u0026rsquo;s how you approach cost management:\nStart with Third-Party Services: When in doubt, opting for third-party services is often the most cost-effective and efficient choice. These services are specialized and can save you time and resources in the short term. Even if they come with a monthly cost, as you mentioned, they often offer a great value proposition by allowing you to focus on other aspects of your platform. Continuous Evaluation: Periodically assess the cost-effectiveness of the third-party services you use. Determine if the expense is justified by the benefits they provide. If a service becomes too costly or if you outgrow it, consider alternatives or building an in-house solution. Building In-House Solutions: As your platform matures and your needs become more complex, it may become financially prudent to build certain services in-house. By doing so, you have more control over costs, scalability, and customization. However, this should be a well-considered decision, as it often involves higher initial investments in development and ongoing maintenance. Cost Monitoring and Optimization: Implement robust cost monitoring and optimization practices. Keep an eye on data usage, query efficiency, and infrastructure costs. Use cloud provider tools to track spending and optimize resources accordingly. Often, small adjustments can lead to significant cost savings. ","content_html":"\u003cp\u003eby hnh\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/playbook/../images/playbook/data-flow.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis data layer serves as the central source of information for various features such as tickers, price alerts, and token details. These features rely on the data within this layer to provide accurate and up-to-date information to users. In essence, it\u0026rsquo;s like the beating heart of the mochi ecosystem, ensuring that all the essential data is readily available for users to access and use.\u003c/p\u003e\n\n\n\u003ch2 id=\"raw-data\"\u003eRaw Data \u003ca href=\"#raw-data\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe raw data that powers our system originates from blockchain transaction data, which we can retrieve from various RPC sources. However, maintaining a stable and consistent RPC connection has proven to be challenging in our past experiences. To address this issue, we\u0026rsquo;ve adopted a different approach. We pull all the raw data into our Clickhouse database, where we store it for a period of 30 days before it\u0026rsquo;s automatically deleted.\u003c/p\u003e\n\u003cp\u003eThis raw data plays a crucial role in providing transaction notifications to our users. Any transaction originating from wallets that we track is processed by our system. If a tracked wallet engages in a transaction, our system ensures that users are promptly notified about it. This process allows us to deliver real-time transaction updates and information to our users reliably.\u003c/p\u003e\n\n\n\u003ch2 id=\"token-data\"\u003eToken data \u003ca href=\"#token-data\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eToken data encompasses several important aspects:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eToken Info: This component provides project metadata, including details such as the project\u0026rsquo;s Twitter account, website, and a concise project description. We retrieve this information from sources like Etherscan or CoinGecko.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePrice Info: Calculating price information ourselves can be redundant and resource-intensive. Instead, we rely on established sources like CoinGecko, which offers a stable API with reasonable costs. This allows us to provide accurate and up-to-date price data to our users without reinventing the wheel.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDex Data: Dex data represents the most comprehensive information about each token. It includes details about which decentralized exchanges (dex) currently list the token and provides data such as the number of token holders or trading volume for each day. Rather than calculating this information in-house, we source it from multiple data sources and store it in our data layer. This approach ensures that our users have access to comprehensive dex-related data for each token without the need for extensive calculations on our part.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 id=\"gotchas\"\u003eGotchas \u003ca href=\"#gotchas\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\n\n\u003ch3 id=\"query-speed\"\u003eQuery speed \u003ca href=\"#query-speed\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhen it comes to building online services, speed is a top priority. As our data layer continues to grow, we\u0026rsquo;ve implemented several optimization strategies to ensure efficient and fast data retrieval:\u003c/p\u003e\n\u003cp\u003eCaching Frequently Accessed Data: To address the need for frequently queried data like token prices and metadata (such as emoji associated with tokens), we employ short-lived Redis caching. This allows us to store this data temporarily in a highly responsive cache, reducing the need to query the upstream services or databases repeatedly for the same information. Caching helps deliver swift responses to user requests.\nRead Replicas and Data Partitioning: For data that cannot be cached due to its infrequent use or size, we\u0026rsquo;ve taken a two-pronged approach. First, we\u0026rsquo;ve created read replicas within our PostgreSQL layer. These replicas serve as copies of our main database, dedicated to handling read requests. This not only spreads the load but also improves query response times.\nAdditionally, we\u0026rsquo;ve optimized data storage and retrieval by partitioning our most frequently accessed tables. Partitioning involves breaking these tables into smaller, more manageable parts based on certain criteria (e.g., time, category, or other relevant factors). This partitioning strategy significantly enhances query performance, as it reduces the amount of data that needs to be scanned or processed during each query. This combination of read replicas and data partitioning ensures that we can maintain high-speed access to our data even as our data layer continues to expand.\u003c/p\u003e\n\n\n\u003ch3 id=\"data-realtime-ness\"\u003eData Realtime-ness \u003ca href=\"#data-realtime-ness\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEnsuring real-time data accuracy for crucial information like token prices is essential to avoid missing any market movements. However, for certain types of data like total assets and token info, real-time updates can be delayed without significantly impacting user experience. Here\u0026rsquo;s how we manage this balance:\u003c/p\u003e\n\u003cp\u003eReal-time Data for Price Updates: For data that requires real-time accuracy, such as token prices, we prioritize instant updates. This ensures that our users receive the most up-to-date information, especially those who rely on timely market data. Real-time data is essential to provide users with the information they need to make informed decisions in the fast-paced world of cryptocurrencies.\u003c/p\u003e\n\u003cp\u003eDelayed Data for Less Critical Information: To reduce stress on our system and enhance the overall user experience, we introduce a slight delay in updating less critical information, such as total assets and token details. This delay allows us to optimize data processing and avoid overwhelming our resources. From the perspective of most users, this data still appears to be served instantly, ensuring a seamless experience.\u003c/p\u003e\n\u003cp\u003ePrioritizing Real-time Data for Top Users: Recognizing the importance of real-time data for our top users, we\u0026rsquo;ve implemented a ranking system. The most active users or those with specific access privileges can enjoy the benefit of receiving data in real-time with minimal delay. This approach ensures that our highest-priority users have access to the most critical data without compromise.\u003c/p\u003e\n\u003cp\u003eBackground Jobs for Data Handling: To manage these data updates efficiently, we handle most data processing as background jobs. This allows us to update and synchronize information without disrupting the user interface or slowing down the system\u0026rsquo;s responsiveness. By running these tasks in the background, we maintain a balance between real-time data needs and system stability.\u003c/p\u003e\n\u003cp\u003eIn summary, our approach involves a careful balance between real-time data for critical information and slightly delayed updates for less critical data. This strategy, combined with a ranking system and background job processing, allows us to provide both real-time accuracy and a smooth user experience while managing system resources effectively.\u003c/p\u003e\n\n\n\u003ch3 id=\"maintain-an-affordable-sassinfras-price\"\u003eMaintain an affordable SaSS/infras price \u003ca href=\"#maintain-an-affordable-sassinfras-price\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eMaintaining a reasonable cost for the data layer is crucial for the sustainability of your online service. Here\u0026rsquo;s how you approach cost management:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eStart with Third-Party Services: When in doubt, opting for third-party services is often the most cost-effective and efficient choice. These services are specialized and can save you time and resources in the short term. Even if they come with a monthly cost, as you mentioned, they often offer a great value proposition by allowing you to focus on other aspects of your platform.\u003c/li\u003e\n\u003cli\u003eContinuous Evaluation: Periodically assess the cost-effectiveness of the third-party services you use. Determine if the expense is justified by the benefits they provide. If a service becomes too costly or if you outgrow it, consider alternatives or building an in-house solution.\u003c/li\u003e\n\u003cli\u003eBuilding In-House Solutions: As your platform matures and your needs become more complex, it may become financially prudent to build certain services in-house. By doing so, you have more control over costs, scalability, and customization. However, this should be a well-considered decision, as it often involves higher initial investments in development and ongoing maintenance.\u003c/li\u003e\n\u003cli\u003eCost Monitoring and Optimization: Implement robust cost monitoring and optimization practices. Keep an eye on data usage, query efficiency, and infrastructure costs. Use cloud provider tools to track spending and optimize resources accordingly. Often, small adjustments can lead to significant cost savings.\u003c/li\u003e\n\u003c/ol\u003e\n","url":"https://log.console.so/playbook/data-layer/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"15096-15-09T90:1515:00+00:00","date_modified":"15096-15-09T90:1515:00+00:00"},{"id":"ddcf6434419a76e51773d472d5c4c903b42c1894","title":"Leverage Mochi balances","summary":"","content_text":"by hnh, minh_cloud\n","content_html":"\u003cp\u003eby hnh, minh_cloud\u003c/p\u003e\n","url":"https://log.console.so/playbook/integrate-mochi-balances/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"15096-15-09T90:1515:00+00:00","date_modified":"15096-15-09T90:1515:00+00:00"},{"id":"7babc233de26ab19ead1b9c278128d5c434910ee","title":"log","summary":"A list of changes and updates to our experiments.","content_text":"A list of changes and updates to our experiments.\nRSS feed, regular updates. Newsletter for frens, monthly updates. September 2023 ","content_html":"\u003cp\u003eA list of changes and updates to our experiments.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRSS feed, regular updates.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://newsletter.console.so\"\u003eNewsletter\u003c/a\u003e for frens, monthly updates.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 id=\"september-2023\"\u003eSeptember 2023 \u003ca href=\"#september-2023\"\u003e\u003c/a\u003e\u003c/h2\u003e\n","url":"https://log.console.so/blog/log/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"15096-15-09T90:1515:00+00:00","date_modified":"15096-15-09T90:1515:00+00:00"},{"id":"17951ee9ffbe00dc4bb8c27eafecff4d7ac60b94","title":"Meaningful commit message","summary":"","content_text":"by hnh\nProblems \u0026amp; Background Have you ever been frustrated by reading an app\u0026rsquo;s changelog that\u0026rsquo;s full of unhelpful information? It\u0026rsquo;s like they don\u0026rsquo;t care about their product or their users. You might have seen changelogs like this:\n2.11.4\nSome bugs fixed or\nFix bugs and improve UI/UX These changelogs are confusing and don\u0026rsquo;t provide any meaningful insights for users. Changelogs are meant for people, not machines. They serve as a way for us to communicate with our users. Whether you\u0026rsquo;re working on a big or small software project, it\u0026rsquo;s essential to create a useful changelog.\nIn the early stages, our commit messages were similar, not designed for humans, product teams, or even fellow engineers. They looked something like this:\nüêû Bugs\nCorrect releaserc cfg (4337ccb) Disable webpage preview in tip message (1fe0fae) Remove extra @ in tip message (e6ac302) Sentry check ticker command (#64) (f81c9ca) Initially, we didn\u0026rsquo;t see anything wrong with these messages; in fact, we considered them good. However, as time passed, we realized that we were missing essential context, such as which features, platforms, or affected areas these commits related to.\nSo, we decided to change the way we write commit messages and put in a bit more effort to enhance our notification platform. Now, with each release, we have clear and informative messages like this:\nHow We\u0026rsquo;ve adopted a specific syntax when creating a new commit:\nlevel(scope): message\nlevel: This indicates the nature of the change, such as a refactor, improvement, chore, fix, or feature. scope: This specifies which feature or area is affected by the changes. message: This is where we explain to users what they need to know about the update. Checklist Focus on what matters most to users: new features, bug fixes, and improvements in terms of UI/speed. Write messages with users in mind, not just for fellow engineers. Always consolidate your PRs into a single commit to maintain a clean and coherent commit history. ","content_html":"\u003cp\u003eby hnh\u003c/p\u003e\n\n\n\u003ch2 id=\"problems--background\"\u003eProblems \u0026amp; Background \u003ca href=\"#problems--background\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eHave you ever been frustrated by reading an app\u0026rsquo;s changelog that\u0026rsquo;s full of unhelpful information? It\u0026rsquo;s like they don\u0026rsquo;t care about their product or their users. You might have seen changelogs like this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e2.11.4\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSome bugs fixed\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFix bugs and improve UI/UX\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThese changelogs are confusing and don\u0026rsquo;t provide any meaningful insights for users. Changelogs are meant for people, not machines. They serve as a way for us to communicate with our users. Whether you\u0026rsquo;re working on a big or small software project, it\u0026rsquo;s essential to create a useful changelog.\u003c/p\u003e\n\u003cp\u003eIn the early stages, our commit messages were similar, not designed for humans, product teams, or even fellow engineers. They looked something like this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eüêû Bugs\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCorrect releaserc cfg (4337ccb)\u003c/li\u003e\n\u003cli\u003eDisable webpage preview in tip message (1fe0fae)\u003c/li\u003e\n\u003cli\u003eRemove extra @ in tip message (e6ac302)\u003c/li\u003e\n\u003cli\u003eSentry check ticker command (#64) (f81c9ca)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eInitially, we didn\u0026rsquo;t see anything wrong with these messages; in fact, we considered them good. However, as time passed, we realized that we were missing essential context, such as which features, platforms, or affected areas these commits related to.\u003c/p\u003e\n\u003cp\u003eSo, we decided to change the way we write commit messages and put in a bit more effort to enhance our notification platform. Now, with each release, we have clear and informative messages like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/playbook/../images/playbook/changelog.png\"/\u003e\u003c/p\u003e\n\n\n\u003ch2 id=\"how\"\u003eHow \u003ca href=\"#how\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe\u0026rsquo;ve adopted a specific syntax when creating a new commit:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elevel(scope): message\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003elevel\u003c/strong\u003e: This indicates the nature of the change, such as a refactor, improvement, chore, fix, or feature.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003escope\u003c/strong\u003e: This specifies which feature or area is affected by the changes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emessage\u003c/strong\u003e: This is where we explain to users what they need to know about the update.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"checklist\"\u003eChecklist \u003ca href=\"#checklist\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Focus on what matters most to users: new features, bug fixes, and improvements in terms of UI/speed.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Write messages with users in mind, not just for fellow engineers.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Always consolidate your PRs into a single commit to maintain a clean and coherent commit history.\u003c/li\u003e\n\u003c/ul\u003e\n","url":"https://log.console.so/playbook/meaningful-commit/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"15096-15-09T90:1515:00+00:00","date_modified":"15096-15-09T90:1515:00+00:00"},{"id":"496e9438ab65557e3360c256d99d6d71460da8a3","title":"Philosophy","summary":"That‚Äôs us ‚Äì making sharp tools, being open to all, having fun, and keeping an eye on the financial future. These four vibes are what Console Labs is all about. They guide our way and help us build and explore.","content_text":"We‚Äôre all about shaping a future where tech is chill, super fun, and all about those money vibes. Here‚Äôs the scoop on the four main vibes guiding our crew:\nSmall but Sharp üîç We‚Äôre digging the idea of creating things that are small but ace at what they do. We aim for simplicity and effectiveness, making sure every tool we make nails its job and stands out in its own way. In a world that can be too much, we keep it simple and focused.\nFinancial-Centric üí∞ We know that managing money is gonna be a big deal in the future, so we‚Äôre focused on making apps and tools that help people do it safely. We want to give everyone easy and safe access to handle their money and learn more about it. Our goal? A future where everyone gets their finances.\nAccessible üåê We stand for a digital world that‚Äôs open to all, removing barriers and starting new conversations and collaborations. Making things accessible to everyone, everywhere is what we‚Äôre all about. We want everyone, no matter where they are, to use our tools and feel included.\nGamified üéÆ We\u0026rsquo;re gamers at heart, and that passion is in everything we make. We know people love fun ‚Äì it‚Äôs irresistible but can be hard to make. So, we‚Äôre turning every interaction into a cool adventure, where every challenge is an opportunity to level up.\nThat‚Äôs us ‚Äì making sharp tools, being open to all, having fun, and keeping an eye on the financial future. These four vibes are what Console Labs is all about. They guide our way and help us build and explore.\n","content_html":"\u003cp\u003eWe‚Äôre all about shaping a future where tech is chill, super fun, and all about those money vibes. Here‚Äôs the scoop on the four main vibes guiding our crew:\u003c/p\u003e\n\n\n\u003ch2 id=\"small-but-sharp-\"\u003eSmall but Sharp üîç \u003ca href=\"#small-but-sharp-\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe‚Äôre digging the idea of creating things that are small but ace at what they do. We aim for simplicity and effectiveness, making sure every tool we make nails its job and stands out in its own way. In a world that can be too much, we keep it simple and focused.\u003c/p\u003e\n\n\n\u003ch2 id=\"financial-centric-\"\u003eFinancial-Centric üí∞ \u003ca href=\"#financial-centric-\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe know that managing money is gonna be a big deal in the future, so we‚Äôre focused on making apps and tools that help people do it safely. We want to give everyone easy and safe access to handle their money and learn more about it. Our goal? A future where everyone gets their finances.\u003c/p\u003e\n\n\n\u003ch2 id=\"accessible-\"\u003eAccessible üåê \u003ca href=\"#accessible-\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe stand for a digital world that‚Äôs open to all, removing barriers and starting new conversations and collaborations. Making things accessible to everyone, everywhere is what we‚Äôre all about. We want everyone, no matter where they are, to use our tools and feel included.\u003c/p\u003e\n\n\n\u003ch2 id=\"gamified-\"\u003eGamified üéÆ \u003ca href=\"#gamified-\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe\u0026rsquo;re gamers at heart, and that passion is in everything we make. We know people love fun ‚Äì it‚Äôs irresistible but can be hard to make. So, we‚Äôre turning every interaction into a cool adventure, where every challenge is an opportunity to level up.\u003c/p\u003e\n\u003cp\u003eThat‚Äôs us ‚Äì making sharp tools, being open to all, having fun, and keeping an eye on the financial future. These four vibes are what Console Labs is all about. They guide our way and help us build and explore.\u003c/p\u003e\n","url":"https://log.console.so/philosophy/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"15096-15-09T90:1515:00+00:00","date_modified":"15096-15-09T90:1515:00+00:00"},{"id":"7a302c3f9cf2b3cec42c41ee9b6ddfb04d9516a9","title":"Continuous Integration","summary":"","content_text":"by quang, hnh\nWhat Continuous Integration (CI) is a development practice where developers integrate code into a shared repository frequently, preferably several times a day. Each integration can then be verified by an automated build and automated tests. While automated testing is not strictly part of CI it is typically implied.\nOne of the key benefits of integrating regularly is that you can detect errors quickly and locate them more easily. As each change introduced is typically small, pinpointing the specific change that introduced a defect can be done quickly.\nImportance of CI In order to understand the importance of CI, it\u0026rsquo;s helpful first to discuss some pain points that often arise due to the absence of CI. Without CI, developers must manually coordinate and communicate when they are contributing code to the end product. This coordination extends beyond the development teams to the rest of the organization, as well. Product teams must coordinate when to sequentially launch features and fixes and which team members will be responsible.\nWithout a robust CI pipeline, a disconnect between the engineering team and the rest of the org can form. Communication between product and engineering can be cumbersome. Engineering becomes a black box which the rest of the team inputs requirements and features and maybe gets expected results back. It will make it harder for engineering to estimate time of delivery on requests because the time to integrate new changes becomes an unknown risk.\nCI/CD @ Console Labs At Console Labs, achieving an efficient deployment pipeline is done by following these best practices:\nThe process for releasing/deploying software MUST be repeatable and reliable Automate everything - automate all the tasks you repeatedly do, and this tends to lead to reliability Done means \u0026ldquo;released.\u0026rdquo; Write good commit message, since they will directly translate to product team changelogs Toolset Docker Github action Commitlint Semantic-release Kustomization ArgoCD Environment setup There is 5 different environments for most of our services.\nLocal CI Dev Preview Production Preview and Production share the same underlying database/infras, we separated them for user experiences.\nChecklist Write a meaningful commit` All tests passed Backward compatible for all APIs \u0026amp; migrations Deployment flow ","content_html":"\u003cp\u003eby quang, hnh\u003c/p\u003e\n\n\n\u003ch2 id=\"what\"\u003eWhat \u003ca href=\"#what\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eContinuous Integration (CI) is a development practice where developers integrate code into a shared repository frequently, preferably several times a day. Each integration can then be verified by an automated build and automated tests. While automated testing is not strictly part of CI it is typically implied.\u003c/p\u003e\n\u003cp\u003eOne of the key benefits of integrating regularly is that you can detect errors quickly and locate them more easily. As each change introduced is typically small, pinpointing the specific change that introduced a defect can be done quickly.\u003c/p\u003e\n\n\n\u003ch2 id=\"importance-of-ci\"\u003eImportance of CI \u003ca href=\"#importance-of-ci\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIn order to understand the importance of CI, it\u0026rsquo;s helpful first to discuss some pain points that often arise due to the absence of CI. Without CI, developers must manually coordinate and communicate when they are contributing code to the end product. This coordination extends beyond the development teams to the rest of the organization, as well. Product teams must coordinate when to sequentially launch features and fixes and which team members will be responsible.\u003c/p\u003e\n\u003cp\u003eWithout a robust CI pipeline, a disconnect between the engineering team and the rest of the org can form. Communication between product and engineering can be cumbersome. Engineering becomes a black box which the rest of the team inputs requirements and features and maybe gets expected results back. It will make it harder for engineering to estimate time of delivery on requests because the time to integrate new changes becomes an unknown risk.\u003c/p\u003e\n\n\n\u003ch2 id=\"cicd--console-labs\"\u003eCI/CD @ Console Labs \u003ca href=\"#cicd--console-labs\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAt Console Labs, achieving an efficient deployment pipeline is done by following these best practices:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe process for releasing/deploying software MUST be repeatable and reliable\u003c/li\u003e\n\u003cli\u003eAutomate everything - automate all the tasks you repeatedly do, and this tends to lead to reliability\u003c/li\u003e\n\u003cli\u003eDone means \u0026ldquo;released.\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eWrite good commit message, since they will directly translate to product team changelogs\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 id=\"toolset\"\u003eToolset \u003ca href=\"#toolset\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDocker\u003c/li\u003e\n\u003cli\u003eGithub action\u003c/li\u003e\n\u003cli\u003eCommitlint\u003c/li\u003e\n\u003cli\u003eSemantic-release\u003c/li\u003e\n\u003cli\u003eKustomization\u003c/li\u003e\n\u003cli\u003eArgoCD\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 id=\"environment-setup\"\u003eEnvironment setup \u003ca href=\"#environment-setup\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThere is 5 different environments for most of our services.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLocal\u003c/li\u003e\n\u003cli\u003eCI\u003c/li\u003e\n\u003cli\u003eDev\u003c/li\u003e\n\u003cli\u003ePreview\u003c/li\u003e\n\u003cli\u003eProduction\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePreview and Production share the same underlying database/infras, we separated them for user experiences.\u003c/p\u003e\n\n\n\u003ch2 id=\"checklist\"\u003eChecklist \u003ca href=\"#checklist\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Write a meaningful commit`\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e All tests passed\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Backward compatible for all APIs \u0026amp; migrations\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 id=\"deployment-flow\"\u003eDeployment flow \u003ca href=\"#deployment-flow\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/playbook/../images/playbook/ci-cd.png\"/\u003e\u003c/p\u003e\n","url":"https://log.console.so/playbook/ci-cd/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"14096-14-09T90:1414:00+00:00","date_modified":"14096-14-09T90:1414:00+00:00"},{"id":"7a0f9de16b6aa04c6a95123d19e98471569976b3","title":"Format a Mochi profile \u0026 Number","summary":"kek","content_text":"When it comes to a UI rendering, there is no such things as a \u0026ldquo;correct way\u0026rdquo;\n","content_html":"\u003cp\u003eWhen it comes to a UI rendering, there is no such things as a \u0026ldquo;correct way\u0026rdquo;\u003c/p\u003e\n","url":"https://log.console.so/playbook/format-profile-number/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"11096-11-09T90:1111:00+00:00","date_modified":"11096-11-09T90:1111:00+00:00"},{"id":"d863a293209660b11355081a047951c38b1e3f35","title":"Integrate new chain","summary":"","content_text":"by hnh, vhbien\nIn the rapidly evolving blockchain industry, it\u0026rsquo;s crucial to keep up with the pace of change. Here\u0026rsquo;s a quick overview of how we seamlessly integrate new chains into the Mochi system, with the caveat that this method is specific to EVM-based blockchains:\nProduct Preparation Pull raw data into clickhouse Ticker, Watchlist Token Info Wallet tracking on this new chain Show assets in profile Transfer / Tip / Airdrop / Payme / Paylink Withdraw Deposit [0] Product Preparation In this section, most of the tasks require manual handling.\nAdd new chain to supported chain list\nGo to Mochi Pay repository. Create a migration file as show below. INSERT INTO \u0026quot;public\u0026quot;.\u0026quot;product_supported_chains\u0026quot; (\u0026quot;chain_id\u0026quot;, \u0026quot;name\u0026quot;, \u0026quot;symbol\u0026quot;, \u0026quot;rpc\u0026quot;, \u0026quot;explorer\u0026quot;, \u0026quot;icon\u0026quot;, \u0026quot;is_evm\u0026quot;,) VALUES ('1', 'Ethereum Mainnet', 'ETH', 'https://eth.llamarpc.com', 'https://etherscan.io', 'https://cdn.discordapp.com/emojis/928216430451761172.png?size=240\u0026amp;quality=lossless', 't'), use the /chains command to see the new changes. Add token emojis To enhance the aesthetics of Mochi, we aim to display token emojis whenever possible. Currently, please reach out to @minh_cloud for assistance with this task.\n[1] Pull raw data into clickhouse To store blockchain raw events data in ClickHouse, follow these steps:\nGo to Infras repository Create a service with the following configuration, similar to the example evm: chainName: base chainId: 8453 rpcServers: - https://1rpc.io/base - https://base.meowrpc.com - https://mainnet.base.org - https://base.blockpi.network/v1/rpc/public syncFromBlockNumber: 2769582 [2] Ticker, watchlist and Token info This step should work automatically. Simply go to Mochi Clients and test out some well-known tokens to ensure that everything is functioning as expected.\n[3] Wallet tracking Wallet tracking is managed within the account-telemetry repository, follow these tasks:\nVerify Clickhouse Database Data: Check the Clickhouse database to ensure it contains data for the new chains. Specifically, verify the latest_block_timestamp table to confirm that it has the necessary records for the new chain. Ensure that the latest_block_timestamp column is up to date and reflects the latest block timestamp for the new chain. Update utils package: Update the chain.go file to add support for the new chain. This involves adding the necessary configurations and logic to handle the data retrieval and notification process for the new chain. By completing these tasks, you\u0026rsquo;ll ensure that wallet tracking in the account-telemetry repository works seamlessly with the new chains, allowing for accurate notifications to users when their tracked accounts receive new transactions.\n[4] Show assets in Profile NOTE: This is the primary step before doing any other below steps In this part, it is essential to ensure that all widely-recognized tokens from the new chains are added to our database whitelist. To fulfill this requirement, we can follow these steps.\nmochi-pay-api Seed new chain\u0026rsquo;s info to the table chains Seed tokens of new chain\u0026rsquo;s to the table tokens Find list listed tokens in the coingeko via this page https://www.coingecko.com/en/all-cryptocurrencies with proper filter. Copy content of search result and ask ChatGPT help to extract list of token symbols. Using result of above script as list input tokens to generate file migration, check mochi-pay-api/script for further information. mochi-api Update all utils at utils folder to support the new chains. Such as: ConvertInputToChainId, ConvertChainToChainId ‚Ä¶ [5] Transfer / Tip / Airdrop / Payme / Paylink Everything must be done at [4], except also need to update list chainIds in the function ListOrCreate of repository mochi-pay-api to support creating new inapp wallet that is used for transfer/deposit/withdraw in the Mochi.\n[6] Withdraw This is actually done at [4] and [5]. A token can be withdrawn when it is whitelist in the DB.\n[7] Deposit To enable support for deposits on a new chain, follow these essential steps:\nCompile and Deploy Deposit Contract:\nCompile the deposit contract using the contract available in the consolelabs/contract-tip-bot repository. Deploy the compiled deposit contract to the new chain. Ensure that the deployment is successful and that the contract is functioning as expected. Change Ownership to Centralized Wallet Address:\nChange the ownership of the deployed deposit contract to a centralized wallet address. Seed Deposit Contract Information:\nUpdate the mochi_pay_api by adding information about the newly deployed deposit contract to the deposit_contracts table. This includes details such as the contract address and other relevant information. Test Deposits:\nPerform testing to ensure that deposits work smoothly on the new chain. Test depositing a few tokens to verify that the deposit functionality is working as intended. ","content_html":"\u003cp\u003eby hnh, vhbien\u003c/p\u003e\n\u003cp\u003eIn the rapidly evolving blockchain industry, it\u0026rsquo;s crucial to keep up with the pace of change. Here\u0026rsquo;s a quick overview of how we seamlessly integrate new chains into the Mochi system, with the caveat that this method is specific to EVM-based blockchains:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Product Preparation\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Pull raw data into clickhouse\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Ticker, Watchlist Token Info\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Wallet tracking on this new chain\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Show assets in profile\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Transfer / Tip / Airdrop / Payme / Paylink\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Withdraw\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Deposit\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"0-product-preparation\"\u003e[0] Product Preparation \u003ca href=\"#0-product-preparation\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIn this section, most of the tasks require manual handling.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdd new chain to supported chain list\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGo to \u003ca href=\"https://github.com/consolelabs/mochi-pay-api\"\u003eMochi Pay\u003c/a\u003e repository.\u003c/li\u003e\n\u003cli\u003eCreate a migration file as show below.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"language-sql\"\u003eINSERT INTO \u0026quot;public\u0026quot;.\u0026quot;product_supported_chains\u0026quot; (\u0026quot;chain_id\u0026quot;, \u0026quot;name\u0026quot;, \u0026quot;symbol\u0026quot;, \u0026quot;rpc\u0026quot;, \u0026quot;explorer\u0026quot;, \u0026quot;icon\u0026quot;, \u0026quot;is_evm\u0026quot;,) VALUES\n('1', 'Ethereum Mainnet', 'ETH', 'https://eth.llamarpc.com', 'https://etherscan.io', 'https://cdn.discordapp.com/emojis/928216430451761172.png?size=240\u0026amp;quality=lossless', 't'),\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003euse the \u003ccode\u003e/chains\u003c/code\u003e command to see the new changes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eAdd token emojis\u003c/strong\u003e\nTo enhance the aesthetics of Mochi, we aim to display token emojis whenever possible. Currently, please reach out to \u003ccode\u003e@minh_cloud\u003c/code\u003e for assistance with this task.\u003c/p\u003e\n\n\n\u003ch3 id=\"1-pull-raw-data-into-clickhouse\"\u003e[1] Pull raw data into clickhouse \u003ca href=\"#1-pull-raw-data-into-clickhouse\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo store blockchain raw events data in ClickHouse, follow these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGo to \u003ca href=\"https://github.com/consolelabs/infrastructure\"\u003eInfras\u003c/a\u003e repository\u003c/li\u003e\n\u003cli\u003eCreate a service with the following configuration, similar to the \u003ca href=\"https://github.com/consolelabs/infrastructure/tree/main/data-warehouse\"\u003eexample\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eevm:\n  chainName: base\n  chainId: 8453\n  rpcServers:\n    - https://1rpc.io/base\n    - https://base.meowrpc.com\n    - https://mainnet.base.org\n    - https://base.blockpi.network/v1/rpc/public\n  syncFromBlockNumber: 2769582\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"2-ticker-watchlist-and-token-info\"\u003e[2] Ticker, watchlist and Token info \u003ca href=\"#2-ticker-watchlist-and-token-info\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThis step should work automatically. Simply go to Mochi Clients and test out some well-known tokens to ensure that everything is functioning as expected.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/playbook/../images/playbook/ticker.png\"/\u003e\u003c/p\u003e\n\n\n\u003ch3 id=\"3-wallet-tracking\"\u003e[3] Wallet tracking \u003ca href=\"#3-wallet-tracking\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWallet tracking is managed within the \u003ca href=\"https://github.com/consolelabs/account-telemetry\"\u003eaccount-telemetry\u003c/a\u003e repository, follow these tasks:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eVerify Clickhouse Database Data\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eCheck the Clickhouse database to ensure it contains data for the new chains. Specifically, verify the \u003ccode\u003elatest_block_timestamp\u003c/code\u003e table to confirm that it has the necessary records for the new chain.\u003c/li\u003e\n\u003cli\u003eEnsure that the \u003ccode\u003elatest_block_timestamp\u003c/code\u003e column is up to date and reflects the latest block timestamp for the new chain.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUpdate \u003ccode\u003eutils\u003c/code\u003e package\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eUpdate the \u003ccode\u003echain.go\u003c/code\u003e file to add support for the new chain. This involves adding the necessary configurations and logic to handle the data retrieval and notification process for the new chain.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy completing these tasks, you\u0026rsquo;ll ensure that wallet tracking in the account-telemetry repository works seamlessly with the new chains, allowing for accurate notifications to users when their tracked accounts receive new transactions.\u003c/p\u003e\n\n\n\u003ch3 id=\"4-show-assets-in-profile\"\u003e[4] Show assets in Profile \u003ca href=\"#4-show-assets-in-profile\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE: This is the primary step before doing any other below steps\u003c/strong\u003e\nIn this part, it is essential to ensure that all widely-recognized tokens from the new chains are added to our database whitelist. To fulfill this requirement, we can follow these steps.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emochi-pay-api\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eSeed new chain\u0026rsquo;s info to the table \u003ccode\u003echains\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSeed tokens of new chain\u0026rsquo;s to the table \u003ccode\u003etokens\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eFind list listed tokens in the coingeko via this page \u003ca href=\"https://www.coingecko.com/en/all-cryptocurrencies\"\u003ehttps://www.coingecko.com/en/all-cryptocurrencies\u003c/a\u003e with proper filter.\u003c/li\u003e\n\u003cli\u003eCopy content of search result and ask ChatGPT help to extract list of token symbols.\u003c/li\u003e\n\u003cli\u003eUsing result of above script as list input tokens to generate file migration, check \u003ccode\u003emochi-pay-api/script\u003c/code\u003e for further information.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emochi-api\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eUpdate all utils at \u003ccode\u003eutils\u003c/code\u003e folder to support the new chains. Such as: \u003ccode\u003eConvertInputToChainId\u003c/code\u003e, \u003ccode\u003eConvertChainToChainId\u003c/code\u003e ‚Ä¶\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"5-transfer--tip--airdrop--payme--paylink\"\u003e[5] Transfer / Tip / Airdrop / Payme / Paylink \u003ca href=\"#5-transfer--tip--airdrop--payme--paylink\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEverything must be done at \u003cstrong\u003e[4]\u003c/strong\u003e, except also need to update list chainIds in the function \u003ccode\u003eListOrCreate\u003c/code\u003e of repository mochi-pay-api  to support creating new inapp wallet that is used for transfer/deposit/withdraw in the Mochi.\u003c/p\u003e\n\n\n\u003ch3 id=\"6-withdraw\"\u003e[6] Withdraw \u003ca href=\"#6-withdraw\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThis is actually done at \u003cstrong\u003e[4]\u003c/strong\u003e and \u003cstrong\u003e[5]\u003c/strong\u003e. A token can be withdrawn when it is whitelist in the DB.\u003c/p\u003e\n\n\n\u003ch3 id=\"7-deposit\"\u003e[7] Deposit \u003ca href=\"#7-deposit\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo enable support for deposits on a new chain, follow these essential steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCompile and Deploy Deposit Contract\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCompile the deposit contract using the contract available in the consolelabs/contract-tip-bot repository.\u003c/li\u003e\n\u003cli\u003eDeploy the compiled deposit contract to the new chain. Ensure that the deployment is successful and that the contract is functioning as expected.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eChange Ownership to Centralized Wallet Address\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eChange the ownership of the deployed deposit contract to a centralized wallet address.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSeed Deposit Contract Information\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUpdate the \u003ccode\u003emochi_pay_api\u003c/code\u003e by adding information about the newly deployed deposit contract to the \u003ccode\u003edeposit_contracts\u003c/code\u003e table. This includes details such as the contract address and other relevant information.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTest Deposits\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePerform testing to ensure that deposits work smoothly on the new chain. Test depositing a few tokens to verify that the deposit functionality is working as intended.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n","url":"https://log.console.so/playbook/add-new-chains/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"11096-11-09T90:1111:00+00:00","date_modified":"11096-11-09T90:1111:00+00:00"},{"id":"e4698d4ceacbe68b86631da8ede65f011550b971","title":"Mission","summary":"","content_text":"// thought about future + software + finance Believe in the future where everyone has to involve in financial activity\n// and we want to Building financial-centric software\n// Part of the Dwarves\n// build and chill Building a product team\n// the financial data layer\nFinancial-centric Recognizing the inevitability of financial activities in the future, we dedicate our efforts to building software that safeguards and enriches people‚Äôs financial journeys.\nWe know dealing with money is going to be a big part of the future, so we‚Äôre dedicated to making software that helps peeps do it safely and navigate through the finance world.\nSecure the Bag: Every creation of ours is your key to handling moolah safely and getting those financial gains. Safe and Sound: Everything we make aims to give people safe and easy access to handle their money and learn more about it. Crafting software that helps peeps navigate the finance world safely is our jam! Every solution we develop is centered around providing safe, secure, and empowering access to financial resources and knowledge, preparing individuals for a flourishing financial future. We‚Äôre looking at a future where everyone‚Äôs got their money game on point. We‚Äôre here to build the tech that makes finance a breeze, so everyone can make those smart moves and get that bread.\nWe see a future where everyone‚Äôs in tune with their finances. That‚Äôs why we‚Äôre here, building the cool tech that makes understanding and accessing finance a breeze, helping everyone make those smart, secure money moves!\n","content_html":"\u003cp\u003e// thought about future + software + finance\nBelieve in the future where everyone has to involve in financial activity\u003c/p\u003e\n\u003cp\u003e// and we want to\nBuilding financial-centric software\u003c/p\u003e\n\u003cp\u003e//\nPart of the Dwarves\u003c/p\u003e\n\u003cp\u003e// build and chill\nBuilding a product team\u003c/p\u003e\n\u003cp\u003e// the financial data layer\u003c/p\u003e\n\n\n\u003ch2 id=\"financial-centric\"\u003eFinancial-centric \u003ca href=\"#financial-centric\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRecognizing the inevitability of financial activities in the future, we dedicate our efforts to building software that safeguards and enriches people‚Äôs financial journeys.\u003c/p\u003e\n\u003cp\u003eWe know dealing with money is going to be a big part of the future, so we‚Äôre dedicated to making software that helps peeps do it safely and navigate through the finance world.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSecure the Bag\u003c/strong\u003e: Every creation of ours is your key to handling moolah safely and getting those financial gains.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSafe and Sound\u003c/strong\u003e: Everything we make aims to give people safe and easy access to handle their money and learn more about it.\nCrafting software that helps peeps navigate the finance world safely is our jam!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEvery solution we develop is centered around providing safe, secure, and empowering access to financial resources and knowledge, preparing individuals for a flourishing financial future.\nWe‚Äôre looking at a future where everyone‚Äôs got their money game on point. We‚Äôre here to build the tech that makes finance a breeze, so everyone can make those smart moves and get that bread.\u003c/p\u003e\n\u003cp\u003eWe see a future where everyone‚Äôs in tune with their finances. That‚Äôs why we‚Äôre here, building the cool tech that makes understanding and accessing finance a breeze, helping everyone make those smart, secure money moves!\u003c/p\u003e\n","url":"https://log.console.so/mission/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"11096-11-09T90:1111:00+00:00","date_modified":"11096-11-09T90:1111:00+00:00"},{"id":"a7ae1bbb61e76dd17a2c543b9ffaf87efa6fb8f1","title":"Shared UI library in multiple platforms","summary":"kek","content_text":"by hnh\nBackground Earlier this year, we introduced a new version of Telegram for Mochi, but it came with some new challenges.\nUp until now, we\u0026rsquo;ve been using a single backend system to support all of our services. This approach was taken to ensure a smooth experience for both users and engineers across different platforms. However, a problem arose when it came to the user interface. We found ourselves dealing with two different sets of rules (Discord \u0026amp; Telegram) for how the interface should look and behave. This complexity kept growing as we added new features and concepts. Eventually, we reached a point where it became nearly impossible to maintain consistency between the two platforms. Worth noting that, we also aim to have a Web, Mobile \u0026amp; Raycast versions for Mochi.\nTo solve these problems and make sure everyone has a similar and easy experience, we realized we need a library that contains all our UI stuff that everyone can use.\nBut, making this library work on different platforms isn\u0026rsquo;t simple. It needs to be easy enough for our frontend team to use, also flexible enough to work on all platforms.\nWins Flatten the learning curves. You might not know this, but our frontend team only has 2 full-time members who really understand all the business and technical stuff. And we have 3 platforms to take care of. So, we definitely need some extra help from our community through our \u0026lsquo;Bounty Program.\u0026rsquo;\nLuckily, thanks to our shared library, the process is pretty simple now.\nBefore:\nA: Hey, can you help me with this feature? A: This feature will be on Discord, Telegram, and the website. Here's how it should work on each platform. A: Make sure to create test files for all the platforms because we make changes frequently. A: Oh, and please document it somewhere because I might forget. B: ... Now:\nA: Hey, can you help me with this feature? A: All you need to do is use a function from a well-tested and clearly defined source. B: Sure! Consistency throughout the systems Dealing with the nitty-gritty details can be quite challenging. Often, we overlook small things like how to display numbers or whether we should add a period at the end of a sentence.\nHandling these details on just one platform is tough, and when it comes to managing them on five different platforms, it feels nearly impossible. Our daily meetings are increasingly filled with questions like, \u0026ldquo;Hey, did you make this change on Discord but forget about it on Telegram?\u0026rdquo; and vice versa.\nAfter we introduced mochi-ui our focus shifted from dealing with technical issues to more meaningful questions like, \u0026ldquo;Does this feature actually make sense?\u0026rdquo; or \u0026ldquo;Hey, this is a bug report from a user, can someone look into it?\u0026rdquo; These are the kinds of challenges we are more than happy to face.\nGotchas Of course, there\u0026rsquo;s no one-size-fits-all solution, especially on the first attempt. We\u0026rsquo;ve identified some issues, and we\u0026rsquo;d be glad to have your hand in addressing them:\nLack of Local Preview: Currently, we don\u0026rsquo;t have a way to preview changes locally. The only option is to update the package and check it in our development environments. Text-Based Components: Some of our components are still text-based, which could be limiting if we need to use them in web applications. Single point of failure: Since \u0026lsquo;mochi-ui\u0026rsquo; is centralized as the only implementation, we must ensure it\u0026rsquo;s robust and fast. Some rendering logic still requires API calls, and we need to find ways to eliminate this dependency. Final thoughts This approach is not and never a silver-bullet and may not be appropriate in all cases. However, we believe that this implementation has made our lives a bit less stressful by allowing us to shift our focus to other areas.\nThis blog post is part of our Mochi Frontend Practices, also check out:\nHow we using mock data to fasten our UI development Guidelines: How to render currency and profile name Applying state machine to switch UI view ","content_html":"\u003cp\u003eby hnh\u003c/p\u003e\n\n\n\u003ch2 id=\"background\"\u003eBackground \u003ca href=\"#background\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEarlier this year, we introduced a new version of Telegram for Mochi, but it came with some new challenges.\u003c/p\u003e\n\u003cp\u003eUp until now, we\u0026rsquo;ve been using a single backend system to support all of our services. This approach was taken to ensure a smooth experience for both users and engineers across different platforms. However, a problem arose when it came to the user interface. We found ourselves dealing with two different sets of rules (Discord \u0026amp; Telegram) for how the interface should look and behave. This complexity kept growing as we added new features and concepts. Eventually, we reached a point where it became nearly impossible to maintain consistency between the two platforms. Worth noting that, we also aim to have a Web, Mobile \u0026amp; Raycast versions for Mochi.\u003c/p\u003e\n\u003cp\u003eTo solve these problems and make sure everyone has a similar and easy experience, we realized we need a library that contains all our UI stuff that everyone can use.\u003c/p\u003e\n\u003cp\u003eBut, making this library work on different platforms isn\u0026rsquo;t simple. It needs to be easy enough for our frontend team to use, also flexible enough to work on all platforms.\u003c/p\u003e\n\n\n\u003ch2 id=\"wins\"\u003eWins \u003ca href=\"#wins\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\n\n\u003ch3 id=\"flatten-the-learning-curves\"\u003eFlatten the learning curves. \u003ca href=\"#flatten-the-learning-curves\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eYou might not know this, but our frontend team only has 2 full-time members who really understand all the business and technical stuff. And we have 3 platforms to take care of. So, we definitely need some extra help from our community through our \u0026lsquo;Bounty Program.\u0026rsquo;\u003c/p\u003e\n\u003cp\u003eLuckily, thanks to our shared library, the process is pretty simple now.\u003c/p\u003e\n\u003cp\u003eBefore:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eA: Hey, can you help me with this feature?\nA: This feature will be on Discord, Telegram, and the website. Here's how it should work on each platform.\nA: Make sure to create test files for all the platforms because we make changes frequently.\nA: Oh, and please document it somewhere because I might forget.\nB: ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eA: Hey, can you help me with this feature?\nA: All you need to do is use a function from a well-tested and clearly defined source.\nB: Sure!\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"consistency-throughout-the-systems\"\u003eConsistency throughout the systems \u003ca href=\"#consistency-throughout-the-systems\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eDealing with the nitty-gritty details can be quite challenging. Often, we overlook small things like how to display numbers or whether we should add a period at the end of a sentence.\u003c/p\u003e\n\u003cp\u003eHandling these details on just one platform is tough, and when it comes to managing them on five different platforms, it feels nearly impossible. Our daily meetings are increasingly filled with questions like, \u0026ldquo;Hey, did you make this change on Discord but forget about it on Telegram?\u0026rdquo; and vice versa.\u003c/p\u003e\n\u003cp\u003eAfter we introduced \u003ccode\u003emochi-ui\u003c/code\u003e our focus shifted from dealing with technical issues to more meaningful questions like, \u0026ldquo;Does this feature actually make sense?\u0026rdquo; or \u0026ldquo;Hey, this is a bug report from a user, can someone look into it?\u0026rdquo; These are the kinds of challenges we are more than happy to face.\u003c/p\u003e\n\n\n\u003ch2 id=\"gotchas\"\u003eGotchas \u003ca href=\"#gotchas\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eOf course, there\u0026rsquo;s no one-size-fits-all solution, especially on the first attempt. We\u0026rsquo;ve identified some issues, and we\u0026rsquo;d be glad to have your hand in addressing them:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLack of Local Preview\u003c/strong\u003e: Currently, we don\u0026rsquo;t have a way to preview changes locally. The only option is to update the package and check it in our development environments.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eText-Based Components\u003c/strong\u003e: Some of our components are still text-based, which could be limiting if we need to use them in web applications.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSingle point of failure\u003c/strong\u003e: Since \u0026lsquo;mochi-ui\u0026rsquo; is centralized as the only implementation, we must ensure it\u0026rsquo;s robust and fast. Some rendering logic still requires API calls, and we need to find ways to eliminate this dependency.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 id=\"final-thoughts\"\u003eFinal thoughts \u003ca href=\"#final-thoughts\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis approach is not and never a silver-bullet and may not be appropriate in all cases. However, we believe that this implementation has made our lives a bit less stressful by allowing us to shift our focus to other areas.\u003c/p\u003e\n\u003cp\u003eThis blog post is part of our Mochi Frontend Practices, also check out:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow we using mock data to fasten our UI development\u003c/li\u003e\n\u003cli\u003eGuidelines: How to render currency and profile name\u003c/li\u003e\n\u003cli\u003eApplying state machine to switch UI view\u003c/li\u003e\n\u003c/ul\u003e\n","url":"https://log.console.so/playbook/shared-ui-lib/","image":"https://log.console.so/img/<no value>","banner_image":"https://log.console.so/img/<no value>","date_published":"11096-11-09T90:1111:00+00:00","date_modified":"11096-11-09T90:1111:00+00:00"}]}