<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ui on Console Labs</title><link>https://consolelabs.github.io/tags/ui/</link><description>Recent content in ui on Console Labs</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 11 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://consolelabs.github.io/tags/ui/index.xml" rel="self" type="application/rss+xml"/><item><title>Guideline: Format a Mochi profile &amp; Number.</title><link>https://consolelabs.github.io/playbook/format-profile--number/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://consolelabs.github.io/playbook/format-profile--number/</guid><description>When it comes to a UI rendering, there is no such things as a &amp;ldquo;correct way&amp;rdquo;</description></item><item><title>How to use a shared UI library in multiple platforms.</title><link>https://consolelabs.github.io/playbook/mochi-ui/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://consolelabs.github.io/playbook/mochi-ui/</guid><description>by hnh.
Background Â¶ Earlier this year, we introduced a new version of Telegram for Mochi, but it came with some new challenges.
Up until now, we&amp;rsquo;ve been using a single backend system to support all of our services. This approach was taken to ensure a smooth experience for both users and engineers across different platforms. However, a problem arose when it came to the user interface. We found ourselves dealing with two different sets of rules (Discord &amp;amp; Telegram) for how the interface should look and behave.</description></item></channel></rss>