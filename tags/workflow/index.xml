<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>workflow on Console Labs</title><link>https://log.console.so/tags/workflow/</link><description>Recent content in workflow on Console Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://log.console.so/tags/workflow/index.xml" rel="self" type="application/rss+xml"/><item><title>Meaningful commit message</title><link>https://log.console.so/playbook/meaningful-commit/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/meaningful-commit/</guid><description>&lt;p>by hnh&lt;/p>
&lt;h2 id="problems--background">Problems &amp;amp; Background &lt;a href="#problems--background">&lt;/a>&lt;/h2>
&lt;p>Have you ever been frustrated by reading an app&amp;rsquo;s changelog that&amp;rsquo;s full of unhelpful information? It&amp;rsquo;s like they don&amp;rsquo;t care about their product or their users. You might have seen changelogs like this:&lt;/p>
&lt;blockquote>
&lt;p>2.11.4&lt;/p>
&lt;ul>
&lt;li>Some bugs fixed&lt;/li>
&lt;/ul>
&lt;p>or&lt;/p>
&lt;ul>
&lt;li>Fix bugs and improve UI/UX&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>These changelogs are confusing and don&amp;rsquo;t provide any meaningful insights for users. Changelogs are meant for people, not machines. They serve as a way for us to communicate with our users. Whether you&amp;rsquo;re working on a big or small software project, it&amp;rsquo;s essential to create a useful changelog.&lt;/p>
&lt;p>In the early stages, our commit messages were similar, not designed for humans, product teams, or even fellow engineers. They looked something like this:&lt;/p>
&lt;blockquote>
&lt;p>🐞 Bugs&lt;/p>
&lt;ul>
&lt;li>Correct releaserc cfg (4337ccb)&lt;/li>
&lt;li>Disable webpage preview in tip message (1fe0fae)&lt;/li>
&lt;li>Remove extra @ in tip message (e6ac302)&lt;/li>
&lt;li>Sentry check ticker command (#64) (f81c9ca)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Initially, we didn&amp;rsquo;t see anything wrong with these messages; in fact, we considered them good. However, as time passed, we realized that we were missing essential context, such as which features, platforms, or affected areas these commits related to.&lt;/p>
&lt;p>So, we decided to change the way we write commit messages and put in a bit more effort to enhance our notification platform. Now, with each release, we have clear and informative messages like this:&lt;/p>
&lt;p>&lt;img src="https://log.console.so/playbook/../images/playbook/changelog.png"/>&lt;/p>
&lt;h2 id="how">How &lt;a href="#how">&lt;/a>&lt;/h2>
&lt;p>We&amp;rsquo;ve adopted a specific syntax when creating a new commit:&lt;/p>
&lt;p>&lt;code>level(scope): message&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>level&lt;/strong>: This indicates the nature of the change, such as a refactor, improvement, chore, fix, or feature.&lt;/li>
&lt;li>&lt;strong>scope&lt;/strong>: This specifies which feature or area is affected by the changes.&lt;/li>
&lt;li>&lt;strong>message&lt;/strong>: This is where we explain to users what they need to know about the update.&lt;/li>
&lt;/ul>
&lt;h3 id="checklist">Checklist &lt;a href="#checklist">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Focus on what matters most to users: new features, bug fixes, and improvements in terms of UI/speed.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Write messages with users in mind, not just for fellow engineers.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Always consolidate your PRs into a single commit to maintain a clean and coherent commit history.&lt;/li>
&lt;/ul></description></item><item><title>Continuous Integration</title><link>https://log.console.so/playbook/ci-cd/</link><pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/ci-cd/</guid><description>&lt;p>by quang, hnh&lt;/p>
&lt;h2 id="what">What &lt;a href="#what">&lt;/a>&lt;/h2>
&lt;p>Continuous Integration (CI) is a development practice where developers integrate code into a shared repository frequently, preferably several times a day. Each integration can then be verified by an automated build and automated tests. While automated testing is not strictly part of CI it is typically implied.&lt;/p>
&lt;p>One of the key benefits of integrating regularly is that you can detect errors quickly and locate them more easily. As each change introduced is typically small, pinpointing the specific change that introduced a defect can be done quickly.&lt;/p>
&lt;h2 id="importance-of-ci">Importance of CI &lt;a href="#importance-of-ci">&lt;/a>&lt;/h2>
&lt;p>In order to understand the importance of CI, it&amp;rsquo;s helpful first to discuss some pain points that often arise due to the absence of CI. Without CI, developers must manually coordinate and communicate when they are contributing code to the end product. This coordination extends beyond the development teams to the rest of the organization, as well. Product teams must coordinate when to sequentially launch features and fixes and which team members will be responsible.&lt;/p>
&lt;p>Without a robust CI pipeline, a disconnect between the engineering team and the rest of the org can form. Communication between product and engineering can be cumbersome. Engineering becomes a black box which the rest of the team inputs requirements and features and maybe gets expected results back. It will make it harder for engineering to estimate time of delivery on requests because the time to integrate new changes becomes an unknown risk.&lt;/p>
&lt;h2 id="cicd--console-labs">CI/CD @ Console Labs &lt;a href="#cicd--console-labs">&lt;/a>&lt;/h2>
&lt;p>At Console Labs, achieving an efficient deployment pipeline is done by following these best practices:&lt;/p>
&lt;ul>
&lt;li>The process for releasing/deploying software MUST be repeatable and reliable&lt;/li>
&lt;li>Automate everything - automate all the tasks you repeatedly do, and this tends to lead to reliability&lt;/li>
&lt;li>Done means &amp;ldquo;released.&amp;rdquo;&lt;/li>
&lt;li>Write good commit message, since they will directly translate to product team changelogs&lt;/li>
&lt;/ul>
&lt;h2 id="toolset">Toolset &lt;a href="#toolset">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Docker&lt;/li>
&lt;li>Github action&lt;/li>
&lt;li>Commitlint&lt;/li>
&lt;li>Semantic-release&lt;/li>
&lt;li>Kustomization&lt;/li>
&lt;li>ArgoCD&lt;/li>
&lt;/ul>
&lt;h2 id="environment-setup">Environment setup &lt;a href="#environment-setup">&lt;/a>&lt;/h2>
&lt;p>There is 5 different environments for most of our services.&lt;/p>
&lt;ul>
&lt;li>Local&lt;/li>
&lt;li>CI&lt;/li>
&lt;li>Dev&lt;/li>
&lt;li>Preview&lt;/li>
&lt;li>Production&lt;/li>
&lt;/ul>
&lt;p>Preview and Production share the same underlying database/infras, we separated them for user experiences.&lt;/p>
&lt;h2 id="checklist">Checklist &lt;a href="#checklist">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Write a meaningful commit`&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> All tests passed&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Backward compatible for all APIs &amp;amp; migrations&lt;/li>
&lt;/ul>
&lt;h2 id="deployment-flow">Deployment flow &lt;a href="#deployment-flow">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://log.console.so/playbook/../images/playbook/ci-cd.png"/>&lt;/p></description></item></channel></rss>