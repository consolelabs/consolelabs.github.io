<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Playbooks on Console Labs</title><link>https://log.console.so/playbook/</link><description>Recent content in Playbooks on Console Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>han@console.so (Han Ngo)</managingEditor><webMaster>han@console.so (Han Ngo)</webMaster><copyright>© 2023 ConsoleLabs.</copyright><lastBuildDate>Tue, 28 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://log.console.so/playbook/index.xml" rel="self" type="application/rss+xml"/><item><title>Pod Town Sunday</title><link>https://log.console.so/playbook/podtownsunday/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/podtownsunday/</guid><description>After a year with Pod Town Metaverse, we discovered that an informed and involved community is key to supporting our project. Whether it&amp;rsquo;s sharing news, being an advocate, or actively participating, a supportive community plays a vital role in a project&amp;rsquo;s success. Your insights and feedback matter, shaping our development. That&amp;rsquo;s why Console Labs isn&amp;rsquo;t just for us – it&amp;rsquo;s for the entire community.
With the aim to make Console Labs become a community-driven team, we decided to take advantage of the Pod Town community which had been enriched through the NFT season, to pose every update of our products.</description></item><item><title>A Scrum Sprint</title><link>https://log.console.so/playbook/workflow/</link><pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/workflow/</guid><description>We work in an 1-week sprint at console labs. At the end of the sprint, we do the review and public announcement.
A typical sprint of the Console Labs:
8:30 am, Monday: There is a planning session between CEO and the product team. 2 pm, Wednesday: The product team review the work in the first half of the week. 4 pm, Friday: The team review all the work in the week, then release the weekly changelog at 6 pm.</description></item><item><title>How to work with emoji on Discord</title><link>https://log.console.so/playbook/render-emoji/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/render-emoji/</guid><description>Emojis play a crucial role in Discord, enhancing the appearance and uniqueness of Discord content. We aim to utilize emojis to make our Bot better than others.
However, managing emojis is not as simple as it may seem. Along our journey, we&amp;rsquo;ve encountered some important considerations.
Product People first As engineers, we don&amp;rsquo;t make decisions about designs or changes to components. Initially, we hardcoded the emoji ID directly into our Discord bot&amp;rsquo;s source code.</description></item><item><title>API-first development</title><link>https://log.console.so/playbook/api-first/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/api-first/</guid><description>Background @Console Labs, our primary goal is to rapidly introduce new features and gather user feedback as quickly as possible. We understand that this approach isn&amp;rsquo;t flawless and can lead to regression bugs. However, at this stage of our product development, we are content with this strategy.
The challenge arises when we aim to develop something new within a short timeframe, typically one week or even just two days. This typically involves creating a small set of new features, starting from gathering requirements, designing the features, and then implementing them on both the backend and frontend.</description></item><item><title>Data layer</title><link>https://log.console.so/playbook/data-layer/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/data-layer/</guid><description>This data layer serves as the central source of information for various features such as tickers, price alerts, and token details. These features rely on the data within this layer to provide accurate and up-to-date information to users. In essence, it&amp;rsquo;s like the beating heart of the mochi ecosystem, ensuring that all the essential data is readily available for users to access and use.
Raw Data The raw data that powers our system originates from blockchain transaction data, which we can retrieve from various RPC sources.</description></item><item><title>Leverage Mochi balances</title><link>https://log.console.so/playbook/integrate-mochi-balances/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/integrate-mochi-balances/</guid><description/></item><item><title>Meaningful commit message</title><link>https://log.console.so/playbook/meaningful-commit/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/meaningful-commit/</guid><description>Problems &amp;amp; Background Have you ever been frustrated by reading an app&amp;rsquo;s changelog that&amp;rsquo;s full of unhelpful information? It&amp;rsquo;s like they don&amp;rsquo;t care about their product or their users. You might have seen changelogs like this:
2.11.4
Some bugs fixed or
Fix bugs and improve UI/UX These changelogs are confusing and don&amp;rsquo;t provide any meaningful insights for users. Changelogs are meant for people, not machines. They serve as a way for us to communicate with our users.</description></item><item><title>Continuous Integration</title><link>https://log.console.so/playbook/ci-cd/</link><pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/ci-cd/</guid><description>What Continuous Integration (CI) is a development practice where developers integrate code into a shared repository frequently, preferably several times a day. Each integration can then be verified by an automated build and automated tests. While automated testing is not strictly part of CI it is typically implied.
One of the key benefits of integrating regularly is that you can detect errors quickly and locate them more easily. As each change introduced is typically small, pinpointing the specific change that introduced a defect can be done quickly.</description></item><item><title>Format a Neko profile</title><link>https://log.console.so/playbook/format-profile-number/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/format-profile-number/</guid><description>Intro When it comes to UI rendering, there&amp;rsquo;s no one-size-fits-all &amp;ldquo;correct way.&amp;rdquo; This is especially true for us because we&amp;rsquo;re building across various platforms and ecosystems, each with its unique user behavior. Consequently, there&amp;rsquo;s no universal UI rendering approach that suits every situation.
In today&amp;rsquo;s article, we&amp;rsquo;ll delve into our first component: the &amp;ldquo;Neko Profile.&amp;rdquo;
What is an Neko Profile A Neko profile is what we call our &amp;ldquo;user.&amp;rdquo; This term applies not only to Mochi but also to everything we&amp;rsquo;ve built, from Pod Town to NFTs and beyond.</description></item><item><title>Integrate new chain</title><link>https://log.console.so/playbook/add-new-chains/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/add-new-chains/</guid><description>In the rapidly evolving blockchain industry, it&amp;rsquo;s crucial to keep up with the pace of change. Here&amp;rsquo;s a quick overview of how we seamlessly integrate new chains into the Mochi system, with the caveat that this method is specific to EVM-based blockchains:
Product Preparation Pull raw data into clickhouse Ticker, Watchlist Token Info Wallet tracking on this new chain Show assets in profile Transfer / Tip / Airdrop / Payme / Paylink Withdraw Deposit [0] Product Preparation In this section, most of the tasks require manual handling.</description></item><item><title>Shared UI library in multiple platforms</title><link>https://log.console.so/playbook/shared-ui-lib/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><author>han@console.so (Han Ngo)</author><guid>https://log.console.so/playbook/shared-ui-lib/</guid><description>Background Earlier this year, we introduced a new version of Telegram for Mochi, but it came with some new challenges.
Up until now, we&amp;rsquo;ve been using a single backend system to support all of our services. This approach was taken to ensure a smooth experience for both users and engineers across different platforms. However, a problem arose when it came to the user interface. We found ourselves dealing with two different sets of rules (Discord &amp;amp; Telegram) for how the interface should look and behave.</description></item></channel></rss>