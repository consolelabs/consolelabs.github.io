<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Playbooks on Console Labs</title><link>https://log.console.so/playbook/</link><description>Recent content in Playbooks on Console Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://log.console.so/playbook/index.xml" rel="self" type="application/rss+xml"/><item><title>API-first development</title><link>https://log.console.so/playbook/api-first/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/api-first/</guid><description>by hnh
Background @Console Labs, our primary goal is to rapidly introduce new features and gather user feedback as quickly as possible. We understand that this approach isn&amp;rsquo;t flawless and can lead to regression bugs. However, at this stage of our product development, we are content with this strategy.
The challenge arises when we aim to develop something new within a short timeframe, typically one week or even just two days.</description></item><item><title>Data layer</title><link>https://log.console.so/playbook/data-layer/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/data-layer/</guid><description>by hnh
This data layer serves as the central source of information for various features such as tickers, price alerts, and token details. These features rely on the data within this layer to provide accurate and up-to-date information to users. In essence, it&amp;rsquo;s like the beating heart of the mochi ecosystem, ensuring that all the essential data is readily available for users to access and use.
Raw Data The raw data that powers our system originates from blockchain transaction data, which we can retrieve from various RPC sources.</description></item><item><title>How to levarage Mochi Balances</title><link>https://log.console.so/playbook/how-to-integrate-mochi-balances/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/how-to-integrate-mochi-balances/</guid><description>by hnh, minh_cloud</description></item><item><title>Meaningful commit message</title><link>https://log.console.so/playbook/meaningful-commit/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/meaningful-commit/</guid><description>by hnh
Problems &amp;amp; Background Have you ever been frustrated by reading an app&amp;rsquo;s changelog that&amp;rsquo;s full of unhelpful information? It&amp;rsquo;s like they don&amp;rsquo;t care about their product or their users. You might have seen changelogs like this:
2.11.4
Some bugs fixed or
Fix bugs and improve UI/UX These changelogs are confusing and don&amp;rsquo;t provide any meaningful insights for users. Changelogs are meant for people, not machines. They serve as a way for us to communicate with our users.</description></item><item><title>CI-CD @ Console Labs</title><link>https://log.console.so/playbook/ci-cd/</link><pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/ci-cd/</guid><description>by quang, hnh
What Continuous Integration (CI) is a development practice where developers integrate code into a shared repository frequently, preferably several times a day. Each integration can then be verified by an automated build and automated tests. While automated testing is not strictly part of CI it is typically implied.
One of the key benefits of integrating regularly is that you can detect errors quickly and locate them more easily.</description></item><item><title>Guideline: Format a Mochi profile &amp; Number</title><link>https://log.console.so/playbook/format-profile--number/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/format-profile--number/</guid><description>When it comes to a UI rendering, there is no such things as a &amp;ldquo;correct way&amp;rdquo;</description></item><item><title>How to use a shared UI library in multiple platforms.</title><link>https://log.console.so/playbook/shared-ui-lib/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/shared-ui-lib/</guid><description>by hnh.
Background Earlier this year, we introduced a new version of Telegram for Mochi, but it came with some new challenges.
Up until now, we&amp;rsquo;ve been using a single backend system to support all of our services. This approach was taken to ensure a smooth experience for both users and engineers across different platforms. However, a problem arose when it came to the user interface. We found ourselves dealing with two different sets of rules (Discord &amp;amp; Telegram) for how the interface should look and behave.</description></item><item><title>Integrate new chain</title><link>https://log.console.so/playbook/integrate-new-chains/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://log.console.so/playbook/integrate-new-chains/</guid><description>by hnh, vhbien
In the rapidly evolving blockchain industry, it&amp;rsquo;s crucial to keep up with the pace of change. Here&amp;rsquo;s a quick overview of how we seamlessly integrate new chains into the Mochi system, with the caveat that this method is specific to EVM-based blockchains:
Product Preparation Pull raw data into clickhouse Ticker, Watchlist Token Info Wallet tracking on this new chain Show assets in profile Transfer / Tip / Airdrop / Payme / Paylink Withdraw Deposit [0] Product Preparation In this section, most of the tasks require manual handling.</description></item></channel></rss>